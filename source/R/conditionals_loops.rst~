Conditionals and Loops 条件循环
-------------------------------------

1. 条件执行
~~~~~~~~~~~~~~

- if语句/单条件执行

 如果满足条件，则执行程序，否则执行下一个条件并退出，其中条件必须是一个被解析为T或F的表达式，所以尽可能让条件简单:
 条件控制语句写法：if (condition) {expr1} else {expr2}
 else不能单独成一行，它的前边必须有内容，如"}" 或者expr1表达式

.. code:: r

 if ('条件表达式为True'){
    '执行语句'
 }else{
    '执行语句'
 }

 # if...else...也可以写成一行
 x <- 3
 y <- if (x==3) 7 else 8
 print('y is the right number: 7')
 #输出: x is the right number: 7

2. 多条件执行
~~~~~~~~~~~~~~

    多条件if...else嵌套结构用来实现更复杂的处理：
    2.1 if(条件1）{语句块1} else if(条件2){语句块2} ... else{语句块}
    2.2 if(条件) {if(条件1){语句块1} else{语句块2} else if(条件2}{if(条件3}...else...} else...

参考如下多条件样例

.. code:: r

  x <- 100
  y <- 99

  if (x<y) {
    print('x is less than y')
  } else if (x==y) {
    print('x is equal to y')
  } else {
    print('x is larger than y')
  }

  # 输出结果：[1] "x is larger than y"
  

3. for循环
~~~~~~~~~~~~~~~~

   for循环的语法格式：for(var in seq){ expr } 
   var为循环变量，seq为向量表达式，通常为一个序列 expr是一个表达式语句组，expr随着var的取不同的seq结果向量的值而被多次重复执行。

.. code:: r

     # 执行1到1000的求和值
     sum <- 0
     for (var in 1:1000)
       sum = sum + var
     print(sum)
     # 返回 500500


4. repeat 
~~~~~~~~~~~~~~~

    Repeat循环重复执行相同的代码，直到满足停止条件。


.. code:: r

  repeat { 
   commands 
   if(condition) {
      break
   }
  }


  > v <- c("hello world")
  > count <- 1
  > repeat {
  +   print(v)
  +   count <- count+1
  +   if (count>5){
  +     break
  +   }
  + }
  # 输出
  #[1] "hello world"
  #[1] "hello world"
  #[1] "hello world"
  #[1] "hello world"
  #[1] "hello world"
  # repeat 循环执行，知道条件满足count>5，则执行if () {break}跳出循环  
 

5. While语句
~~~~~~~~~~~~~~~~~~

    While循环一次又一次地执行相同的代码，直到满足停止条件。
    基本语法：while (expression) { expr }
    

.. tip::

  何时用for或while? Python常将while用作无限次循环情况，for用在有限次循环，R暂无

.. code:: r

  > count <- 1
  > while (count<=5) {
  +   print(v)
  +   count = count + 1
  + }
  #[1] "hello world"
  #[1] "hello world"
  #[1] "hello world"
  #[1] "hello world"
  #[1] "hello world"


6. break next
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- **break**

  * break语句用在for循环中
  * 打破了最小封闭for循环
  * break语句用来终止循环语句，即循环条件没有False条件或者还没被完全递归完，也会停止执行循环语句
  * 如果使用的是嵌套循环，break语句在深层嵌套中，则break会停止执行最深层的循环，并开始执行下一行代码


.. code:: r

  > v <- letters[1:6]
  > print(v)
  # [1] "a" "b" "c" "d" "e" "f"
  > for (i in v){
  +   if (i == "d") {
  +     break
  +   }
  +   print(i)
  + }

  # 输出
  # [1] "a"
  # [1] "b"
  # [1] "c"

|
  执行结果说明: 在a,b,c正常输出在i == "d"时，因为符合break条件，所以退出循环，与下面样例next做比对

- **next**

  * 当我们想跳过循环的当前迭代而不终止它时便可使用next。 遇到next时，R解析器跳过本次迭代，并开始循环的下一次迭代。
   

.. code:: r

  > v <- letters[1:6]
  > print(v)
  # [1] "a" "b" "c" "d" "e" "f"
  > for (i in v){
  +   if (i == "d") {
  +     next
  +   }
  +   print(i)
  + }
  
  # 输出
  #[1] "a"
  #[1] "b"
  #[1] "c"
  #[1] "e"
  #[1] "f"

 # 注意观察输出值在循环中的变化

|

 执行结果说明: 退出本次循，跳过当前循环的剩余语句，然后继续下一轮迭代



参考：
   1. R语言 条件语句与循环，`Conditionals_and_Loops`_

.. _Conditionals_and_Loops: http://www.openbookproject.net/books/bpp4awd/ch04.html#conditionals-and-loops

